/*
 * Voyado Engage Orders Reactor
 *
 * This reactor integrates with Voyado Engage's Orders (v2) API.
 * It has two methods, one for exporting Hantera Orders. This is done when an order
 * reaches Confirmed state (scheduled by voyado.engage.onOrderCommands rule). This
 * order can be used to automate delivery notifications to customers inside Voydao
 * Engage by starting automating when "Order status = Confirmed".
 *
 * As Voyado Engage's Order model does not support multiple deliveries the same way
 * Hantera does, shipped deliveries are exported as separate orders in the other
 * method. This method is called when a Delivery reaches the Completed state and
 * can be used to automate delivery notifications to customers inside Voydao Engage
 * by starting automating when "Order status = Shipped".
 */

let baseUrl |> registry->'externalServices/voyado/baseUrl'
let apiKey |> registry->'externalServices/voyado/apiKey'

let findContact(email: text) =>
  web.http(
    $'{baseUrl}/api/v3/contacts/id?email={email}'
    {
      headers = {
        'User-Agent' -> 'Hantera'
        'apikey' -> $'{apiKey}'
        'Content-Type' -> 'application/json'
      }
    }
   ) match
    (res: HttpResponseOk) |> res.content

let defaultValue (input) |> (val) => input match
  nothing |> val
  |> input

let getStoreId(channelKey) =>
  let map = registry->'/resources/registry/externalServices/voyado/storeMap'
  from map match
    { } |> map->channelKey

// Query used for confirmedOrder export
let getOrder(orderId: uuid) =>
  let orderQuery =
    query orders(
      orderNumber
      orderState
      currencyCode
      invoiceAddress
      createdAt
      channelKey
    )
    filter $'orderId == {orderId}'
    navigate
      deliveries(
        deliveryId
        deliveryNumber
        createdAt
        deliveryState
        shippingProductNumber
        shippingDescription
        shippingTotal
        shippingPrice
        shippingTaxFactor
        shippingTaxTotal
      )
    navigate
      orderLines(
        productNumber
        description
        orderLineTotal
        quantity
        image
        taxTotal
        taxFactor
      )
      navigate calculatedDiscounts(value)
    navigate
      payments(providerKey, authorizedAmount, capturedBalance)
  from orderQuery match
    QueryError |> nothing
    |>
      orderQuery
      first

// Query used for completedDelivery export
let getDelivery(deliveryId: uuid) =>
  let deliveryQuery =
    query deliveries(
      deliveryId
      deliveryNumber
      createdAt
      deliveryState
      shippingTotal
      shippingPrice
      shippingTaxFactor
      shippingTaxTotal
    )
    filter $'deliveryId == {deliveryId}'
    navigate
      order(
        orderNumber
        orderState
        currencyCode
        invoiceAddress
        createdAt
        channelKey
      )
      navigate
        payments(providerKey, authorizedAmount, capturedBalance)
    navigate
      orderLines(
        productNumber
        description
        orderLineTotal
        quantity
        image
        taxTotal
        taxFactor
      )
      navigate calculatedDiscounts(value)
  from deliveryQuery match
    QueryError |> nothing
    |>
      deliveryQuery
      first

let mapOrderLines (orderLines) =>
  orderLines
  select line =>
    let totalDiscounts =
      line.calculatedDiscounts
      select d => d.value
      sum

    from {
      type = 'Purchase'
      sku = line.productNumber
      quantity = line.quantity
      grossPaidPrice = line.orderLineTotal
      grossPaidPricePerUnit = line.orderLineTotal / line.quantity
      originalPricePerUnit = (line.orderLineTotal + totalDiscounts) / line.quantity
      description = line.description defaultValue('Product')
      imageUrl = line.image
      // Provide your own lookup for product page URL:
      // targetUrl = 
      taxAmount = line.taxTotal
      taxPercent = line.taxFactor * 100
      totalDiscount = totalDiscounts
      // Add additional extra data as you need:
      extraData = { }
    }

let mapShippingLine(delivery) =>
  {
    type = 'Purchase'
    sku = delivery.shippingProductNumber defaultValue('Shipping')
    description = delivery.shippingDescription defaultValue('Shipping')
    quantity = 1
    grossPaidPrice = delivery.shippingTotal
    grossPaidPricePerUnit = delivery.shippingTotal
    originalPricePerUnit = delivery.shippingPrice
    totalDiscount = delivery.shippingPrice - delivery.shippingTotal
    taxAmount = delivery.shippingTaxTotal
    taxPercent = delivery.shippingTaxFactor * 100
  }

let mapConfirmedOrder(contactId, order) =>

  let paymentMethods =
    order.payments
    select p => {
      description = p.providerKey
      value = p.authorizedAmount + p.capturedBalance
    }

  let shippingLines =
    order.deliveries
    select delivery => mapShippingLine(delivery)

  let items = [mapOrderLines(order.orderLines), shippingLines] flatten

  from {
    contact = {
      matchKeyType = 'ContactId'
      matchKey = contactId
    }
    orderNumber = order.orderNumber
    orderStatus = 'Confirmed'
    paymentStatus = 'Paid'
    createdDate = order.createdAt
    storeId = getStoreId(order.channelKey)
    currency = order.currencyCode
    paymentMethods = paymentMethods
    items = items
  }

let mapCompletedDelivery(contactId, delivery) =>

  let paymentMethods =
    delivery.order.payments
    select p => {
      description = p.providerKey
      value = p.authorizedAmount + p.capturedBalance
    }

  let items = [mapOrderLines(delivery.orderLines), [mapShippingLine(delivery)]] flatten

  from {
    contact = {
      matchKeyType = 'ContactId'
      matchKey = contactId
    }
    orderNumber = delivery.order.orderNumber
    orderStatus = 'Shipped'
    paymentStatus = 'Paid'
    createdDate = delivery.order.createdAt
    shippedDate = now // This might be slightly inaccurate. Consider passing from rule.
    storeId = getStoreId(delivery.order.channelKey)
    currency = delivery.order.currencyCode
    paymentMethods = paymentMethods
    items = items
  }

let withTotalGrossPrice (voyadoOrder) |>
  voyadoOrder with {
    totalGrossPrice =
      voyadoOrder.items
      select (i: {
        grossPaidPrice: number
      }) => i.grossPaidPrice
      sum
  }

from {
  confirmedOrder = (opts: {
    orderId: uuid
    attempt: nothing|number
  }) =>

    let order = getOrder(opts.orderId)

    let retry (attempt:number) =>
      let jobId = resources.scheduleJob(
        'voyado.engage.orders'
        'confirmedOrder'
        {
          orderId = opts.orderId
          attempt = attempt
        }
        now + 10 seconds
      )
      from $'Contact not found, retrying ({attempt}/5): {jobId}'

    from order match
      nothing |> 'Order not found'
      when order.orderState == 'pending' |> 'Can not export pending order'
      when (order.orderLines count) == 0 |> 'No order lines on order'
      |> findContact(order.invoiceAddress.email) match
        (contactId: text) |>
          web.http(
            $'{baseUrl}/api/v2/orders'
            {
              method = 'POST'
              headers = {
                'User-Agent' -> 'Hantera'
                'apikey' -> $'{apiKey}'
                'Content-Type' -> 'application/json'
              }
              body = mapConfirmedOrder(contactId, order) withTotalGrossPrice
            }
          ) match
            HttpResponseOk |> $'Exported order {order.orderNumber}'
            (res: HttpResponse) |> $'Failed to export order {order.orderNumber}: ({res.content})'
        |> opts.attempt match
          nothing |> retry(2)
          when opts.attempt < 5 |> retry (opts.attempt + 1)
          |> 'Contact not found, giving up'

  completedDelivery = (opts: {
    deliveryId: uuid
    attempt: nothing|number
  }) =>

    let delivery = getDelivery(opts.deliveryId)

    let retry (attempt:number) =>
      let jobId = resources.scheduleJob(
        'voyado.engage.orders'
        'completedDelivery'
        {
          deliveryId = opts.deliveryId
          attempt = attempt
        }
        now + 10 seconds
      )
      from $'Contact not found, retrying ({attempt}): {jobId}'

    from delivery match
      nothing |> 'Delivery not found'
      when delivery.deliveryState != 'completed' |>
        'Delivery must be completed, current state: ' + delivery.deliveryState
      when (delivery.orderLines count) == 0 |> 'No order lines on delivery'
      |> findContact(delivery.order.invoiceAddress.email) match
        (contactId: text) |>
          web.http(
            $'{baseUrl}/api/v2/orders'
            {
              method = 'POST'
              headers = {
                'User-Agent' -> 'Hantera'
                'apikey' -> $'{apiKey}'
                'Content-Type' -> 'application/json'
              }
              body = mapCompletedDelivery(contactId, delivery) withTotalGrossPrice
            }
          ) match
            HttpResponseOk |> $'Exported delivery {delivery.deliveryNumber}'
            (res: HttpResponse) |> $'Failed to export delivery {delivery.deliveryNumber}: ({res.content})'
        |> opts.attempt match
          nothing |> retry(2)
          when opts.attempt < 5 |> retry (opts.attempt + 1)
          |> 'Contact not found, giving up'
}
