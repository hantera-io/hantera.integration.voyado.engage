let baseUrl |> registry->'externalServices/voyado/baseUrl'
let apiKey |> registry->'externalServices/voyado/apiKey'

let findContact(email: text) =>
  web.http(
    $'{baseUrl}/api/v3/contacts/id?email={email}'
    {
      headers = {
        'User-Agent' -> 'Hantera'
        'apikey' -> $'{apiKey}'
        'Content-Type' -> 'application/json'
      }
    }
   ) match
    (res: HttpResponseOk) |> res.content

let getOrder(orderId: uuid) =>
  // Get current order state
  let orderQuery = query {
    edge = 'orders'
    filter = $'orderId == {orderId}'
    node = {
      fields = ['invoiceAddress']
      navigate = [{
        edge = 'deliveries'
        count = true
        node = {
          fields = [
            'deliveryId'
            'deliveryNumber'
          ]
          navigate = [{
            edge = 'orderLines'
            node = {
              fields = ['productNumber']
            }
          }]
        }
      }]
    }
  }
  // Extract order state from query result
  from orderQuery match
    QueryError |> nothing
    |>
      orderQuery.nodes
      first


let defaultOrderMap(contactId, order, delivery) =>
  {
    contact = {
      matchKeyType = 'ContactId'
      matchKey = contactId
    }
  }

from {
  createOrUpdateOrder = (orderId: uuid) =>

    let order = getOrder(orderId)

    let mapOrder (contactId, order, delivery) =>
      defaultOrderMap(contactId, order, delivery)
      // Pass to custom mapper (if configured)
      // Custom mapper must access a record with any fields and a deliveryId
      // Custom mapper can extend the incoming value (using with), query graph for additional data etc.

    from order match
      nothing |> 'Order not found'
      when order.deliveries.totalCount == 0 |> 'No deliveries on order'
      |> findContact(order.invoiceAddress.email) match
        (contactId: text) |>
          order.deliveries.nodes
          select d =>
            web.http(
              $'{baseUrl}/api/v2/orders'
              {
                method = 'POST'
                headers = {
                  'User-Agent' -> 'Hantera'
                  'apikey' -> $'{apiKey}'
                  'Content-Type' -> 'application/json'
                }
                body = mapOrder(contactId, order, d)
              }
            ) match
              HttpResponseOk |> $'Exported delivery {d.deliveryNumber}'
              (res: HttpResponse) |> $'Failed to export delivery {d.deliveryNumber}: ({res.content})'
        |> 'Contact not found'

}
